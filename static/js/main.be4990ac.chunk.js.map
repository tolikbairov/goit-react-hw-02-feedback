{"version":3,"sources":["components/section/section.js","components/feedback-options/feedback-options.js","components/statistics/notification/Notification.js","components/statistics/Statistics.js","components/App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","btnOnClick","map","option","type","name","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","console","log","defaultProps","App","state","calculateTotal","handleBtnClick","event","target","setState","prevState","this","Component","ReactDOM","render","document","querySelector"],"mappings":"8OASeA,EARC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKD,IACJC,MCOQC,EAXS,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAClC,OACE,mCACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAqBC,KAAK,SAASC,KAAMF,EAAQG,QAASL,EAA1D,SACGE,GADUA,SCGNI,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,mCACE,4BAAIA,OCDJC,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACGC,QAAQC,KAAKH,GACXA,EACD,qCACE,uCAAUH,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,QAGzB,cAAC,EAAD,CAAcN,QAAQ,0BAKfC,IACfA,EAAWQ,aAAe,CAAEJ,MAAO,G,IClB7BK,E,4MACJC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPQ,eAAiB,WACf,OAAO,EAAKD,MAAMT,KAAO,EAAKS,MAAMR,QAAU,EAAKQ,MAAMP,K,EAE3DS,eAAiB,SAACC,GAChB,IAAMjB,EAAOiB,EAAMC,OAAOlB,KAC1B,EAAKmB,UAAS,SAACC,GAAD,sBACXpB,EAAOoB,EAAUpB,GAAQ,O,4CAG9B,WACE,OACE,qCACE,cAAC,EAAD,CAASR,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,WAAYyB,KAAKL,mBAGrB,cAAC,EAAD,CAASxB,MAAM,aAAf,SACE,cAAC,EAAD,CACEa,KAAMgB,KAAKP,MAAMT,KACjBC,QAASe,KAAKP,MAAMR,QACpBC,IAAKc,KAAKP,MAAMP,IAChBC,MAAOa,KAAKN,iBACZN,mBAAoBY,KAAKN,4B,GA9BnBO,aAqCHT,I,MC3BfU,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.be4990ac.chunk.js","sourcesContent":["import React from \"react\";\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      {children}\n    </>\n  );\n};\nexport default Section;\n","import React from \"react\";\nconst FeedbackOptions = ({ options, btnOnClick }) => {\n  return (\n    <>\n      {options.map((option) => (\n        <button key={option} type=\"button\" name={option} onClick={btnOnClick}>\n          {option}\n        </button>\n      ))}\n    </>\n  );\n};\nexport default FeedbackOptions;\n","import React from \"react\";\nconst Notification = ({ message }) => {\n  return (\n    <>\n      <p>{message}</p>\n    </>\n  );\n};\nexport default Notification;\n","import React from \"react\";\nimport Notification from \"./notification/Notification\";\n// import PropTypes from \"prop-types\";\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      {console.log(!total)}\n      {!!total ? (\n        <>\n          <p>Good: {good}</p>\n          <p>Neutral: {neutral}</p>\n          <p>Bad: {bad}</p>\n          <p>Total: {total}</p>\n          <p>Positive feedback: {positivePercentage}</p>\n        </>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </>\n  );\n};\nexport default Statistics;\nStatistics.defaultProps = { total: 0 };\n","import React, { Component } from \"react\";\nimport Section from \"./section/section\";\nimport FeedbackOptions from \"./feedback-options/feedback-options\";\nimport Statistics from \"./statistics/Statistics\";\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  calculateTotal = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n  handleBtnClick = (event) => {\n    const name = event.target.name;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={[\"good\", \"neutral\", \"bad\"]}\n            btnOnClick={this.handleBtnClick}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={this.calculateTotal()}\n            positivePercentage={this.calculateTotal()}\n          />\n        </Section>\n      </>\n    );\n  }\n}\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n// (\n//   <Painting\n//     src={data.avatar}\n//     name={data.name}\n//     tag={data.tag}\n//     location={data.location}\n//     followers={data.stats.followers}\n//     views={data.stats.views}\n//     likes={data.stats.likes}\n//   />\n// ),\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}